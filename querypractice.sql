-- Aggregate functions
SELECT
	ROUND(AVG(BUDGET), 2) AS AVG_BUDGET
FROM
	FILMS;

SELECT
	MAX(BUDGET)
FROM
	FILMS;

-- non-numerical data
-- return last data(alphabatically)
SELECT
	MAX(COUNTRY)
FROM
	FILMS;

-- return first data(alphabatically)
SELECT
	MIN(COUNTRY)
FROM
	FILMS;

SELECT
	SUM(BUDGET) AS TOTAL_BUDGET,
	COUNT(BUDGET) AS TOTAL_NUM_OF_FILMS,
FROM
	FILMS
WHERE
	RELEASE_YEAR >= 2000;

SELECT
	*
FROM
	(
		SELECT
			(GROSS - BUDGET) AS PROFIT
		FROM
			FILMS
	)
WHERE
	PROFIT IS NOT NULL;

-- Order BY
SELECT
	TITLE,
	BUDGET
FROM
	FILMS
WHERE
	BUDGET IS NOT NULL
ORDER BY
	BUDGET DESC
LIMIT
	10;

SELECT
	NAME,
	BIRTHDATE,
	DEATHDATE
FROM
	PEOPLE
WHERE
	DEATHDATE IS NOT NULL
ORDER BY
	BIRTHDATE;

SELECT
	TITLE,
	RELEASE_YEAR
FROM
	FILMS
WHERE
	COUNTRY = 'India'
ORDER BY
	RELEASE_YEAR DESC,
	TITLE ASC;

-- GROUP BY 
SELECT
	COUNTRY,
	RELEASE_YEAR,
	COUNT(TITLE) AS NUMBER_OF_FILMS
FROM
	FILMS
WHERE
	COUNTRY IS NOT NULL
GROUP BY
	COUNTRY,
	RELEASE_YEAR
ORDER BY
	NUMBER_OF_FILMS DESC;

-- GROUP BY WITH HAVING
SELECT
	CERTIFICATION,
	LANGUAGE,
	COUNT(TITLE) AS NUM_OF_FILMS
FROM
	FILMS
WHERE
	CERTIFICATION IS NOT NULL
GROUP BY
	CERTIFICATION,
	LANGUAGE
HAVING
	COUNT(TITLE) > 3
ORDER BY
	NUM_OF_FILMS DESC;

SELECT
	RELEASE_YEAR,
	ROUND(AVG(DURATION), 2)
FROM
	FILMS
GROUP BY
	RELEASE_YEAR
HAVING
	AVG(DURATION) > 120;

-- JOINS
-- INNER JOIN WITH USING
SELECT
	PM.COUNTRY,
	PM.CONTINENT,
	PRIME_MINISTER,
	PRESIDENT
FROM
	PRESIDENTS AS PR
	INNER JOIN PRIME_MINISTERS AS PM ON PM.COUNTRY = PR.COUNTRY;


-- INNER JOIN WITH USING
SELECT
	PM.COUNTRY,
	PM.CONTINENT,
	PRIME_MINISTER,
	PRESIDENT
FROM
	PRESIDENTS AS PR
	INNER JOIN PRIME_MINISTERS AS PM USING (COUNTRY)
	
	
-- INNER JOIN ON three TABlES
SELECT
	PM.COUNTRY,
	PM.CONTINENT,
	PRIME_MINISTER,
	PRESIDENT,
	PM_START
FROM
	PRESIDENTS AS PR
	INNER JOIN PRIME_MINISTERS AS PM USING (COUNTRY)
	INNER JOIN PRIME_MINISTER_TERMS AS TERM USING (PRIME_MINISTER)